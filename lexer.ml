# 1 "lexer.mll"
 
  open Parser;;
  exception InvalidToken of char ;;
    

# 8 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\226\255\227\255\229\255\231\255\232\255\233\255\234\255\
    \235\255\083\000\003\000\238\255\239\255\240\255\241\255\243\255\
    \245\255\049\000\247\255\248\255\249\255\250\255\251\255\079\000\
    \252\255\098\000\192\000\011\001\095\001\002\000\242\255\237\255\
    \228\255\236\255\028\000\253\255\254\255\255\255\186\000\252\255\
    \054\000\076\000\255\255\254\255\253\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\025\000\029\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\009\000\255\255\255\255\255\255\255\255\255\255\003\000\
    \255\255\002\000\002\000\001\000\001\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\003\000\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\035\000\000\000\000\000\000\000\039\000\000\000\
    \255\255\255\255\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\029\000\029\000\029\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \029\000\016\000\029\000\000\000\000\000\003\000\036\000\000\000\
    \022\000\021\000\004\000\006\000\019\000\005\000\020\000\009\000\
    \024\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\017\000\018\000\008\000\011\000\007\000\014\000\
    \031\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\013\000\010\000\012\000\030\000\028\000\
    \044\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\026\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\043\000\015\000\032\000\033\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\000\000\000\000\000\000\
    \000\000\025\000\000\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\041\000\000\000\000\000\025\000\
    \000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\000\000\037\000\000\000\000\000\025\000\
    \000\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\000\000\000\000\
    \000\000\000\000\027\000\000\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\025\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\042\000\000\000\000\000\000\000\028\000\000\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\029\000\029\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\029\000\255\255\255\255\000\000\034\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\
    \040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\041\000\000\000\009\000\009\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\025\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\255\255\255\255\255\255\
    \255\255\025\000\255\255\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\038\000\255\255\255\255\026\000\
    \255\255\038\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\255\255\034\000\255\255\255\255\026\000\
    \255\255\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\255\255\255\255\
    \255\255\255\255\027\000\255\255\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\028\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\038\000\255\255\255\255\255\255\028\000\255\255\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 13 "lexer.mll"
            ( token lexbuf )
# 208 "lexer.ml"

  | 1 ->
let
# 14 "lexer.mll"
                  var
# 214 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 14 "lexer.mll"
                      ( VAR (var) )
# 218 "lexer.ml"

  | 2 ->
let
# 15 "lexer.mll"
                    id
# 224 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 15 "lexer.mll"
                       ( ID (id) )
# 228 "lexer.ml"

  | 3 ->
let
# 16 "lexer.mll"
                 i
# 234 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 16 "lexer.mll"
                   ( INT (int_of_string i) )
# 238 "lexer.ml"

  | 4 ->
# 17 "lexer.mll"
          ( LPAREN )
# 243 "lexer.ml"

  | 5 ->
# 18 "lexer.mll"
          ( RPAREN )
# 248 "lexer.ml"

  | 6 ->
# 19 "lexer.mll"
          ( DOT )
# 253 "lexer.ml"

  | 7 ->
# 20 "lexer.mll"
          ( COMMA )
# 258 "lexer.ml"

  | 8 ->
# 21 "lexer.mll"
          ( SEMI )
# 263 "lexer.ml"

  | 9 ->
# 22 "lexer.mll"
          ( COLON )
# 268 "lexer.ml"

  | 10 ->
# 23 "lexer.mll"
          ( CUT)
# 273 "lexer.ml"

  | 11 ->
# 24 "lexer.mll"
           ( IS )
# 278 "lexer.ml"

  | 12 ->
# 25 "lexer.mll"
          ( PIPE)
# 283 "lexer.ml"

  | 13 ->
# 26 "lexer.mll"
           ( IMPLIES )
# 288 "lexer.ml"

  | 14 ->
# 27 "lexer.mll"
          ( QUERY )
# 293 "lexer.ml"

  | 15 ->
# 28 "lexer.mll"
          ( LBRACKET )
# 298 "lexer.ml"

  | 16 ->
# 29 "lexer.mll"
          ( RBRACKET )
# 303 "lexer.ml"

  | 17 ->
# 30 "lexer.mll"
          ( EQUALS )
# 308 "lexer.ml"

  | 18 ->
# 31 "lexer.mll"
            ( NOTEQUALS )
# 313 "lexer.ml"

  | 19 ->
# 32 "lexer.mll"
           ( NOT )
# 318 "lexer.ml"

  | 20 ->
# 33 "lexer.mll"
          ( LESS )
# 323 "lexer.ml"

  | 21 ->
# 34 "lexer.mll"
          ( GREATER )
# 328 "lexer.ml"

  | 22 ->
# 35 "lexer.mll"
          ( PLUS )
# 333 "lexer.ml"

  | 23 ->
# 36 "lexer.mll"
          ( MINUS )
# 338 "lexer.ml"

  | 24 ->
# 37 "lexer.mll"
          ( TIMES )
# 343 "lexer.ml"

  | 25 ->
# 38 "lexer.mll"
          ( DIVIDE )
# 348 "lexer.ml"

  | 26 ->
# 39 "lexer.mll"
          ( one_line_comment lexbuf )
# 353 "lexer.ml"

  | 27 ->
# 40 "lexer.mll"
           ( nested_comment 0 lexbuf )
# 358 "lexer.ml"

  | 28 ->
# 41 "lexer.mll"
          ( EOF )
# 363 "lexer.ml"

  | 29 ->
let
# 42 "lexer.mll"
           c
# 369 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 42 "lexer.mll"
             ( raise (InvalidToken c) )
# 373 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and one_line_comment lexbuf =
   __ocaml_lex_one_line_comment_rec lexbuf 34
and __ocaml_lex_one_line_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 47 "lexer.mll"
                              (EOF)
# 385 "lexer.ml"

  | 1 ->
# 48 "lexer.mll"
                            (token lexbuf)
# 390 "lexer.ml"

  | 2 ->
# 49 "lexer.mll"
                            (one_line_comment lexbuf)
# 395 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_one_line_comment_rec lexbuf __ocaml_lex_state

and nested_comment level lexbuf =
   __ocaml_lex_nested_comment_rec level lexbuf 38
and __ocaml_lex_nested_comment_rec level lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 52 "lexer.mll"
                             (failwith "Syntax error: Unexpected end of file within /* ... */ comment")
# 407 "lexer.ml"

  | 1 ->
# 53 "lexer.mll"
                            (if level = 0 then token lexbuf else nested_comment (level-1) lexbuf)
# 412 "lexer.ml"

  | 2 ->
# 54 "lexer.mll"
                            (nested_comment (level+1) lexbuf)
# 417 "lexer.ml"

  | 3 ->
# 55 "lexer.mll"
                            (nested_comment level lexbuf)
# 422 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_nested_comment_rec level lexbuf __ocaml_lex_state

;;

